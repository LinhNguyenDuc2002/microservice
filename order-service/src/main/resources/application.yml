#server
server:
  port: 8083
  servlet:
    context-path: /api/order-service

# Database
spring:
  application:
    name: order-service

  datasource:
    url: jdbc:mysql://localhost:3306/order_service
    username: root
    password:

  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6379

  # A option in springboot framework is used to define Hibernate behavior in creating and updating database
  # Hibernate will create and update tables in database, corresponding to object in your app.
  # if table dont exist, Hibernate will create it. Else, Hibernate will update changes
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  lombok:
    enabled: true

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8081/api/user-service
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/oauth2/jwks

  kafka:
    bootstrap-servers: localhost:9094
    template:
      default-topic: send-email
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      auto-offset-reset: earliest
      group-id: create-customer-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      partition:
        assignment:
          strategy: org.apache.kafka.clients.consumer.RangeAssignor

# Mail
message:
  email:
    protocol: smtp
    from: 
    username:
    password:
    host: smtp-mail.outlook.com
    port: 587

product-service:
  endpoint: http://localhost:8082
