# server
server:
  port: 8081
  servlet:
    context-path: /api

# write all specific info about activities related Spring security
logging:
  level:
    org.springframework.security: trace

spring:
  application:
    name: user-service

  # Database
  datasource:
    url: jdbc:mysql://localhost:3306/user_service
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari: # connection pooling library
      maximum-pool-size: 5 # maximum number of connection pooling at the same time
      minimum-idle: 1 # minimum number of connection pooling
      idle-timeout: 300000 # free time before canceled
      max-lifetime: 1800000
      validation-timeout: 5000
      connection-test-query: SELECT 1

  # A option in springboot framework is used to define Hibernate behavior in creating and updating database
  # Hibernate will create and update tables in database, corresponding to object in your app.
  # if table don't exist, Hibernate will create it. Else, Hibernate will update changes
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  lombok:
    enabled: true

  open-in-view: false

  # Validation
  mvc:
    throw-exception-if-no-handler-found: true

  data:
    # redis cache
    redis:
      host: localhost
      port: 6379

  kafka:
    bootstrap-servers: localhost:9094
    template:
      default-topic: send-email
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      topics:
        - name: create-customer
          partitions: 2

  # Config for JavaMailSender
  mail:
    from-address: ${message.email.from}
    username: ${message.email.username}
    password: ${message.email.password}
    host: ${message.email.host}
    port: ${message.email.port}
    properties:
      mail:
        protocol: ${message.email.protocol}
        smtp:
          auth: true
          starttls:
            enable: true

# Mail
message:
  email:
    protocol: smtp
    from:
    username:
    password:
    host: smtp-mail.outlook.com
    port: 587

# JWT
jwt:
  secret-key: 123456
  keypair:
    private:
    public:

oauth:
  grant-type: shop-secure
  client:
    default:
      access-token-lifespan: 1440 # in minutes
      refresh-token-lifespan: 1440 # in minutes

# Cloudinary
cloudinary:
  cloudName:
  apiKey:
  apiSecret:

tempUser:
  lifespan: 12

# Swagger: http://localhost:8080/api/swagger-ui/index.html

app:
  services:
    product: http://localhost:9000/api