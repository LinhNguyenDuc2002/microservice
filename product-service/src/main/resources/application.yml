#server
server:
  port: 8082
  servlet:
    context-path: /api

# Database
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/product_service
    username: root
    password: 16042002

  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6379

  # A option in springboot framework is used to define Hibernate behavior in creating and updating database
  # Hibernate will create and update tables in database, corresponding to object in your app.
  # if table dont exist, Hibernate will create it. Else, Hibernate will update changes
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  lombok:
    enabled: true

  kafka:
    bootstrap-servers: localhost:9094
    template:
      default-topic: update-detail
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      auto-offset-reset: earliest
      group-id: create-customer-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      partition:
        assignment:
          strategy: org.apache.kafka.clients.consumer.RangeAssignor

# Cloudinary
cloudinary:
  cloudName: dwlokgoam
  apiKey: 976349327572747
  apiSecret: xMr3J7-geMUqeQNpcwHTZD4Aook

# JWT
access-token:
  private: keypair/access-token-private.key
  public: keypair/access-token-public.key

order-service:
  endpoint: http://localhost:8083


